/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.2.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.Client;
import org.openapitools.model.Payment;
import org.openapitools.model.Subscription;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-28T23:11:08.615839200+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "clients", description = "the clients API")
public interface ClientsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /clients/{clientId} : Usuń klienta
     *
     * @param clientId  (required)
     * @return Klient usunięty (status code 204)
     */
    @Operation(
        operationId = "clientsClientIdDelete",
        summary = "Usuń klienta",
        responses = {
            @ApiResponse(responseCode = "204", description = "Klient usunięty")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/clients/{clientId}"
    )
    
    default ResponseEntity<Void> clientsClientIdDelete(
        @Parameter(name = "clientId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Integer clientId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /clients/{clientId} : Pobierz klienta po ID
     *
     * @param clientId  (required)
     * @return Dane klienta (status code 200)
     *         or Klient nie znaleziony (status code 404)
     */
    @Operation(
        operationId = "clientsClientIdGet",
        summary = "Pobierz klienta po ID",
        responses = {
            @ApiResponse(responseCode = "200", description = "Dane klienta", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Client.class))
            }),
            @ApiResponse(responseCode = "404", description = "Klient nie znaleziony")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/{clientId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Client> clientsClientIdGet(
        @Parameter(name = "clientId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Integer clientId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"address\" : \"address\", \"name\" : \"name\", \"id\" : 0, \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /clients/{clientId}/payments : Pobierz płatności klienta
     *
     * @param clientId  (required)
     * @return Lista płatności (status code 200)
     */
    @Operation(
        operationId = "clientsClientIdPaymentsGet",
        summary = "Pobierz płatności klienta",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista płatności", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Payment.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/{clientId}/payments",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Payment>> clientsClientIdPaymentsGet(
        @Parameter(name = "clientId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Integer clientId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"amount\" : 6.0274563, \"id\" : 0, \"paymentDate\" : \"2000-01-23\", \"status\" : \"PAID\" }, { \"amount\" : 6.0274563, \"id\" : 0, \"paymentDate\" : \"2000-01-23\", \"status\" : \"PAID\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /clients/{clientId}/payments : Dodaj płatność klientowi
     *
     * @param clientId  (required)
     * @param payment  (required)
     * @return Płatność została zarejestrowana (status code 201)
     */
    @Operation(
        operationId = "clientsClientIdPaymentsPost",
        summary = "Dodaj płatność klientowi",
        responses = {
            @ApiResponse(responseCode = "201", description = "Płatność została zarejestrowana")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/{clientId}/payments",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> clientsClientIdPaymentsPost(
        @Parameter(name = "clientId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Integer clientId,
        @Parameter(name = "Payment", description = "", required = true) @Valid @RequestBody Payment payment
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /clients/{clientId} : Aktualizuj dane klienta
     *
     * @param clientId  (required)
     * @param client  (required)
     * @return Zaktualizowano dane klienta (status code 200)
     */
    @Operation(
        operationId = "clientsClientIdPut",
        summary = "Aktualizuj dane klienta",
        responses = {
            @ApiResponse(responseCode = "200", description = "Zaktualizowano dane klienta")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clients/{clientId}",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> clientsClientIdPut(
        @Parameter(name = "clientId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Integer clientId,
        @Parameter(name = "Client", description = "", required = true) @Valid @RequestBody Client client
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /clients/{clientId}/subscriptions : Pobierz subskrypcje klienta
     *
     * @param clientId  (required)
     * @return Lista subskrypcji (status code 200)
     */
    @Operation(
        operationId = "clientsClientIdSubscriptionsGet",
        summary = "Pobierz subskrypcje klienta",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista subskrypcji", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Subscription.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients/{clientId}/subscriptions",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Subscription>> clientsClientIdSubscriptionsGet(
        @Parameter(name = "clientId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Integer clientId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"serviceType\" : \"Internet Fiber 600Mb/s\", \"endDate\" : \"2000-01-23\", \"id\" : 0, \"startDate\" : \"2000-01-23\" }, { \"serviceType\" : \"Internet Fiber 600Mb/s\", \"endDate\" : \"2000-01-23\", \"id\" : 0, \"startDate\" : \"2000-01-23\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /clients/{clientId}/subscriptions : Dodaj subskrypcję klientowi
     *
     * @param clientId  (required)
     * @param subscription  (required)
     * @return Subskrypcja została dodana (status code 201)
     */
    @Operation(
        operationId = "clientsClientIdSubscriptionsPost",
        summary = "Dodaj subskrypcję klientowi",
        responses = {
            @ApiResponse(responseCode = "201", description = "Subskrypcja została dodana")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients/{clientId}/subscriptions",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> clientsClientIdSubscriptionsPost(
        @Parameter(name = "clientId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("clientId") Integer clientId,
        @Parameter(name = "Subscription", description = "", required = true) @Valid @RequestBody Subscription subscription
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /clients : Pobierz listę wszystkich klientów
     *
     * @return Lista klientów (status code 200)
     */
    @Operation(
        operationId = "clientsGet",
        summary = "Pobierz listę wszystkich klientów",
        responses = {
            @ApiResponse(responseCode = "200", description = "Lista klientów", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Client.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clients",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Client>> clientsGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 0, \"email\" : \"email\" }, { \"address\" : \"address\", \"name\" : \"name\", \"id\" : 0, \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /clients : Dodaj nowego klienta
     *
     * @param client  (required)
     * @return Klient został utworzony (status code 201)
     */
    @Operation(
        operationId = "clientsPost",
        summary = "Dodaj nowego klienta",
        responses = {
            @ApiResponse(responseCode = "201", description = "Klient został utworzony")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clients",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> clientsPost(
        @Parameter(name = "Client", description = "", required = true) @Valid @RequestBody Client client
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
